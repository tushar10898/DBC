import sys
import os
import json
import datetime
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QFrame, QSizePolicy, QLineEdit, QTextEdit, QComboBox, QPushButton, QVBoxLayout, QHBoxLayout, QTabWidget, QFormLayout, QDialog, QMessageBox
from PyQt5.QtGui import QPixmap, QFont, QIcon
from PyQt5.QtCore import Qt, QTimer

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

class LogWindow(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Metadata Generation Log")
        self.setMinimumSize(1200, 600)
        
        layout = QVBoxLayout()
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        layout.addWidget(self.log_area)
        
        self.setLayout(layout)

class FolderCreatorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Metadata Generator")
        self.resize(700, 900)
        self.init_ui()

    def init_ui(self):
        # Define fonts
        label_font = QFont()
        label_font.setPointSize(9)
        label_font.setBold(True)

        normal_font = QFont()
        normal_font.setPointSize(10)

        # Dropdown stylesheet
        dropdown_style = """
            QComboBox QAbstractItemView {
                selection-background-color: #005A5F;
                selection-color: white;
            }
        """

        # Create input fields
        self.emp_id_input = QLineEdit()
        self.factory_mapping = {
            'MX1': ('Juarez', 'Mexico'),
            'MX2': ('Juarez', 'Mexico'),
            'MX3': ('Juarez', 'Mexico'),
            'VAD': ('Vadodara', 'India'),
            'BAO': ('Baodi', 'China'),
            'CAS': ('Castellon', 'Spain'),
            'PON': ('Ponferrada', 'Spain'),
            'GAS': ('Gaspe', 'Canada'),
            'GRF': ('Grand forks', 'United States'),
            'CHE': ('Cherbourg', 'France'),
            'FUJ': ('Fujian', 'China'),
            'DAB': ('Debaspet', 'India')
        }

        self.factory_blade_types = {
            'BAO': ['75.7P2', '77.4-2P', '80.4E1'],
            'CAS': ['77.4P3', '77.4-1P', '77.4-2P', '77.4P6'],
            'CHE': ['107P2'],
            'DAB': ['64.6', '62.2P2'],
            'FUJ': ['107P2'],
            'GAS': ['62.2P2', '47.3P', '44.1P'],
            'GRF': ['62.2P2'],
            'PON': ['48.7P', '62.2P2'],
            'VAD': ['75.7P2', '77.4P3', '77.4-2P'],
            'MX1': ['62.2'],
            'MX2': ['75.7'],
            'MX3': ['68.7']
        }

        self.initUI(label_font, normal_font, dropdown_style)

    def initUI(self, label_font, normal_font, dropdown_style):
        layout = QVBoxLayout()

        layout = QVBoxLayout()

        # --- Header Section with DBC MATE on the left and logo on the right ---
        header_layout = QHBoxLayout()

        # DBC MATE Text inside a green box on the left
        self.dbc_mate_label = QLabel("  DBC MATE  ")
        dbc_mate_font = QFont()
        dbc_mate_font.setPointSize(10)
        dbc_mate_font.setBold(True)
        self.dbc_mate_label.setFont(dbc_mate_font)
        self.dbc_mate_label.setStyleSheet("""
            color: white;
            background-color: #005A5F;
            padding: 4px 12px;
            border-radius: 8px;
        """)
        self.dbc_mate_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Preferred)
        header_layout.addWidget(self.dbc_mate_label, alignment=Qt.AlignLeft)

        # For icon
        self.setWindowIcon(QIcon(resource_path("DBC_Mate_icon.ico")))

        # Logo on the right
        self.logo_label = QLabel(self)
        pixmap = QPixmap(resource_path("logo.png"))
        if not pixmap.isNull():
            self.logo_label.setPixmap(pixmap.scaled(200, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.logo_label.setAlignment(Qt.AlignRight)
        header_layout.addWidget(self.logo_label)

        # Add header layout to main layout
        layout.addLayout(header_layout)

        # --- Heading ---
        self.heading_label = QLabel("Enter Blade Details")
        heading_font = QFont()
        heading_font.setPointSize(11)
        heading_font.setBold(True)
        self.heading_label.setFont(heading_font)
        self.heading_label.setStyleSheet("color: #918e8e;")
        self.heading_label.setAlignment(Qt.AlignLeft)
        layout.addWidget(self.heading_label)

        # Horizontal line
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        layout.addWidget(line)


        # Employee ID
        self.emp_id_label = QLabel('Employee ID/SSO:')
        self.emp_id_label.setFont(label_font)
        self.emp_id_input.setFont(normal_font)
        layout.addWidget(self.emp_id_label)
        layout.addWidget(self.emp_id_input)

        # Customer Name
        self.customer_label = QLabel('Customer Name:')
        self.customer_label.setFont(label_font)
        self.customer_input = QLineEdit('GE Vernova')
        self.customer_input.setFont(normal_font)
        layout.addWidget(self.customer_label)
        layout.addWidget(self.customer_input)

        # Supplier
        self.supplier_label = QLabel('Supplier:')
        self.supplier_label.setFont(label_font)
        self.supplier_dropdown = QComboBox()
        self.supplier_dropdown.setFont(normal_font)
        self.supplier_dropdown.setStyleSheet(dropdown_style)
        self.supplier_dropdown.addItems(['LM', 'TPI'])
        self.supplier_dropdown.currentTextChanged.connect(self.update_factory_options)
        layout.addWidget(self.supplier_label)
        layout.addWidget(self.supplier_dropdown)

        # Factory Name
        self.factory_label = QLabel('Factory Name:')
        self.factory_label.setFont(label_font)
        self.factory_dropdown = QComboBox()
        self.factory_dropdown.setFont(normal_font)
        self.factory_dropdown.setStyleSheet(dropdown_style)
        self.factory_dropdown.addItems(['BAO', 'VAD', 'CAS', 'DAB', 'FUJ', 'GAS', 'GRF', 'PON', 'CHE'])
        self.factory_dropdown.currentTextChanged.connect(self.update_location_country_blades)
        layout.addWidget(self.factory_label)
        layout.addWidget(self.factory_dropdown)

        # Factory Location
        self.factory_location_label = QLabel('Factory Location:')
        self.factory_location_label.setFont(label_font)
        self.factory_location_dropdown = QComboBox()
        self.factory_location_dropdown.setFont(normal_font)
        self.factory_location_dropdown.setStyleSheet(dropdown_style)
        self.factory_location_dropdown.setEditable(False)
        self.factory_location_dropdown.addItems(['Baodi', 'Castellon', 'Cherbourg', 'Dabaspet', 'Fujian', 'Gaspe', 'Grand forks', 'Juarez', 'Ponferrada', 'Vadodara'])
        layout.addWidget(self.factory_location_label)
        layout.addWidget(self.factory_location_dropdown)

        # Country
        self.country_label = QLabel('Country:')
        self.country_label.setFont(label_font)
        self.country_dropdown = QComboBox()
        self.country_dropdown.setFont(normal_font)
        self.country_dropdown.setStyleSheet(dropdown_style)
        self.country_dropdown.setEditable(False)
        self.country_dropdown.addItems(['China', 'Brazil', 'Canada', 'India', 'France', 'Mexico', 'Poland', 'Spain', 'Turkey', 'United States'])
        layout.addWidget(self.country_label)
        layout.addWidget(self.country_dropdown)

        # Blade Type
        self.blade_type_label = QLabel('Blade Type:')
        self.blade_type_label.setFont(label_font)
        self.blade_type_dropdown = QComboBox()
        self.blade_type_dropdown.setFont(normal_font)
        self.blade_type_dropdown.setStyleSheet(dropdown_style)
        self.blade_type_dropdown.addItems(['75.7P2','77.4-2P','80.4E1'])
        layout.addWidget(self.blade_type_label)
        layout.addWidget(self.blade_type_dropdown)

        # Blade ID
        self.blade_id_label = QLabel('Blade ID:')
        self.blade_id_label.setFont(label_font)
        self.blade_id_input = QLineEdit()
        self.blade_id_input.setFont(normal_font)
        layout.addWidget(self.blade_id_label)
        layout.addWidget(self.blade_id_input)

        # Inspection Stage
        self.stage_label = QLabel('Inspection Stage:')
        self.stage_label.setFont(label_font)
        self.stage_dropdown = QComboBox()
        self.stage_dropdown.setFont(normal_font)
        self.stage_dropdown.setStyleSheet(dropdown_style)
        self.stage_dropdown.addItems([
            'Final_Release_Inspection',
            'Post_Mold_inspection', 
            'In_Mold_PreClosing_Inspection',
            'Field_Inspection',
            'Other_Inspection'
        ])
        layout.addWidget(self.stage_label)
        layout.addWidget(self.stage_dropdown)

        # Comment
        self.comment_label = QLabel('Comment:')
        self.comment_label.setFont(label_font)
        self.comment_input = QLineEdit()
        self.comment_input.setFont(normal_font)
        layout.addWidget(self.comment_label)
        layout.addWidget(self.comment_input)


        # Buttons
        button_layout        = QHBoxLayout()
        self.create_button   = QPushButton(' Create Folder ')
        self.create_button.clicked.connect(self.create_folder_structure)
        self.create_button.setFixedWidth(200)
        self.create_button.setStyleSheet("""
                QPushButton {
                        background-color: #005A5F;
                        color: white;
                        font-weight: bold;
                        padding: 14px 20px;
                        border-radius: 18px;
                }
                QPushButton:hover {
                        background-color: #007A80;
                }
        """)
        button_layout.addWidget(self.create_button)

        self.metadata_button = QPushButton('Generate Metadata')
        self.metadata_button.clicked.connect(self.generate_metadata)
        self.metadata_button.setFixedWidth(200)
        self.metadata_button.setStyleSheet("""
                QPushButton {
                        background-color: #005A5F;
                        color: white;
                        font-weight: bold;
                        padding: 14px 20px;
                        border-radius: 18px;
                }
                QPushButton:hover {
                        background-color: #007A80;
                }
        """)
        button_layout.addWidget(self.metadata_button)

        layout.addLayout(button_layout)

        


        self.setLayout(layout)
        self.setWindowTitle('DBC MATE (Folder & Metadata Generator)')
        self.show()
    
    def update_factory_options(self):
        supplier = self.supplier_dropdown.currentText()
        self.factory_dropdown.clear()
        if supplier == "TPI":
            self.factory_dropdown.addItems(['MX1', 'MX2', 'MX3'])
        else:
            self.factory_dropdown.addItems(['BAO', 'VAD', 'CAS', 'DAB', 'FUJ', 'GAS', 'GRF', 'PON', 'CHE'])    

    def update_location_and_country(self):
        factory = self.factory_dropdown.currentText()
        location, country = self.factory_mapping.get(factory, ('', ''))
        if location:
            self.factory_location_dropdown.setCurrentText(location)
        else:
            self.factory_location_dropdown.setEditText('')

        if country:
            self.country_dropdown.setCurrentText(country)

    def update_blade_types(self):
        factory = self.factory_dropdown.currentText()
        blade_types = self.factory_blade_types.get(factory, [])
        self.blade_type_dropdown.clear()
        self.blade_type_dropdown.addItems(blade_types)

    def update_location_country_blades(self):
        self.update_location_and_country()
        self.update_blade_types()
                
    def get_plant_code(self, factory_name):
        plant_codes = {'BAO': '55', 'VAD': '33', 'CAS': '23', 'DAB': '32', 'FUJ': '56', 'GAS': '42', 'GRF': '41', 'PON': '22', 'CHE': '27'}
        return plant_codes.get(factory_name, 'XX')
    

    def create_folder_structure(self):
        customer = self.customer_input.text()
        country = self.country_dropdown.currentText()
        factory = self.factory_dropdown.currentText()
        stage = self.stage_dropdown.currentText()
        blade_id = self.blade_id_input.text()
        blade_type = self.blade_type_dropdown.currentText()
        plant_code = self.get_plant_code(factory)

        # Validation for Blade ID length and numeric value
        supplier = self.supplier_dropdown.currentText()

        if not blade_id.isdigit():
                self.show_error_message("Blade ID must contain only numeric characters.")
                return

        if supplier == 'LM' and len(blade_id) != 6:
                self.show_error_message("Blade ID for LM must be 6 digits.")
                return
        elif supplier == 'TPI' and len(blade_id) != 5:
                self.show_error_message("Blade ID for TPI must be 5 digits.")
                return
        
        # Continue with folder creation if Blade ID is valid

        # Country prefix mapping
        country_prefix_map = {
        'China': 'GECH',
        'India': 'GEIN',
        'Mexico': 'GEMX',
        'Brazil': 'GEBR',
        'Canada': 'GECA',
        'France': 'GEFR',
        'Poland': 'GEPL',
        'Spain': 'GEES',
        'Turkey': 'GETR',
        'United States': 'GEUS'
        }
        prefix = country_prefix_map.get(country, 'GE')

        # Main Folder Path
        base_folder = os.path.join(os.path.expanduser('~'), 'Desktop', f"{customer}-{country}")
        factory_folder = os.path.join(base_folder, f"Factory_{factory}")

        supplier = self.supplier_dropdown.currentText()

        if supplier == "TPI":
           blade_folder_name = f"Blade_TPI-{blade_id}"
        else:
           blade_folder_name = f"Blade_{blade_id}-{blade_type}-{plant_code}"

        blade_folder = os.path.join(factory_folder, blade_folder_name)
        service_folder = os.path.join(blade_folder, f"IIN-R-{prefix}_serviceid_00000")
        stage_folder = os.path.join(service_folder, stage)

        os.makedirs(stage_folder, exist_ok=True)

        # ✅ Add this after successful folder creation
        self.create_button.setStyleSheet("background-color: green; color: white;")
        self.create_button.setText("Success!")
        QTimer.singleShot(500, self.reset_create_button)


        # Subfolders
        subfolders = ['Central_Web', 'C-Stiffener', 'Leading_Edge', 'Third_Web', 'Trailing_Edge', 'Ros']
        for sub in subfolders:
            os.makedirs(os.path.join(stage_folder, sub), exist_ok=True)

    def show_error_message(self, message):
        """Displays an error message in a popup."""
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Error")
        msg.setText(message)
        msg.exec_()
        self.create_button.setStyleSheet("background-color: red; color: white;")
        self.create_button.setText("Error!")
        QTimer.singleShot(500, self.reset_create_button)

    def reset_create_button(self):
        self.create_button.setStyleSheet("")
        self.create_button.setText("Create Folder")
           

    def generate_metadata(self):
        """Generate metadata JSON in subfolders that contain images or videos."""
        desktop_path = os.path.join(os.path.expanduser('~'), 'Desktop')
        valid_extensions = {".jpg", ".jpeg", ".png", ".mp4", ".avi", ".360", ".mov"}

        # Create and show log window
        log_window = LogWindow(self)
        log_area = log_window.log_area  # QTextEdit where we'll show logs

        # Factory location mapping
        factory_location_map = {
            "MX1": "Juarez",
            "MX2": "Juarez",
            "MX3": "Juarez",
            "VAD": "Vadodara",
            "BAO": "Baodi",
            "CAS": "Castellon",
            "PON": "Ponferrada",
            "GAS": "Gaspe",
            "GRF": "Grand forks",
            "CHE": "Cherbourg",
            "FUJ": "Fujian",
            "DAB": "Debaspet"
        }

        metadata_generated = False

        # Filter only folders that start with "GE Vernova-"
        all_base_folders = [
            os.path.join(desktop_path, folder)
            for folder in os.listdir(desktop_path)
            if os.path.isdir(os.path.join(desktop_path, folder)) and folder.startswith("GE Vernova-")
        ]

        for base_folder in all_base_folders:
            base_folder_name = os.path.basename(base_folder)
            cust_country = base_folder_name.replace("GE Vernova-", "")
            parts_split = cust_country.split("-", 1)
            if len(parts_split) == 2:
                customer, country = parts_split
            else:
                customer = "GE Vernova"
                country = parts_split[0]

            for root, dirs, files in os.walk(base_folder):

                # --- ✅ CHECK FOR "Ros" FOLDER AND .db3 FILES ---
                if os.path.basename(root).lower() == "ros":
                    has_db3_file = any(file.lower().endswith(".db3") for file in files)
                    if has_db3_file:
                        log_area.append(f"✅ ROSBAG file is Present in: {root}..")
                    else:
                        log_area.append(f"🛑 ROSBAG file is missing in: {root}. Can't generate metadata.")


                has_media_files = any(file.lower().endswith(tuple(valid_extensions)) for file in files)
                is_leaf_folder = not dirs  # No subdirectories means it's a leaf folder

                if has_media_files:
                    metadata_file = os.path.join(root, "metadata.json")
                    if os.path.exists(metadata_file):
                        log_area.append(f"ℹ️ Metadata already exists in: {metadata_file} (Skipped)")
                        continue  # Skip if metadata already exists

                if has_media_files:
                    try:
                        path_parts = os.path.normpath(root).split(os.sep)
                        # Expecting structure: GE Vernova-XX / Factory_XXX / Blade_xxx / IIN-R-... / Stage / Subfolder
                        # So index -5 should be 'Factory_XXX'
                        factory_folder = path_parts[-5]
                        if "_" in factory_folder:
                            factory_code = factory_folder.split("_")[1].upper()
                        else:
                            factory_code = factory_folder.upper()
                        factory = factory_folder.split("_", 1)[-1] if "_" in factory_folder else factory_folder
                        location = factory_location_map.get(factory_code, "")
                        sect_folder = os.path.basename(root)
                        current_dt = datetime.datetime.now().strftime("%-d/%-m/%y %H:%M") if os.name != 'nt' else datetime.datetime.now().strftime("%#d/%#m/%y %H:%M")

                        blade_folder = path_parts[-4]
                        iin_folder = path_parts[-3]
                        stage = path_parts[-2]

                        if blade_folder.startswith("Blade_TPI-"):
                            blade_id = blade_folder.replace("Blade_TPI-", "")
                            supplier = "TPI"
                            esn = f"TPI-{blade_id}"
                            # Determine blade type based on starting digit
                            if blade_id.startswith("6"):
                                blade_type = "75.7"
                            elif blade_id.startswith("5"):
                                blade_type = "68.7"
                            elif blade_id.startswith("4"):
                                blade_type = "62.2"
                            else:
                                blade_type = ""
                            plant_code = ""
                        else:
                            raw = blade_folder.replace("BLADE_", "").replace("Blade_", "")
                            blade_parts = raw.split("-", 2)
                            blade_id = blade_parts[0] if len(blade_parts) > 0 else ""
                            blade_type = blade_parts[1] if len(blade_parts) > 1 else ""
                            plant_code = blade_parts[2] if len(blade_parts) > 2 else ""
                            supplier = "LM"
                            esn = f"{blade_id}-{blade_type}-{plant_code}"



                        metadata = {
                            "sso": self.emp_id_input.text(),
                             "datetime": current_dt,
                            "cust": customer,
                            "supplier": supplier,
                            "country": country,
                            "factory": factory,
                            "location": location,
                            "blade_id": blade_id,
                            "engine_type": blade_type,
                            "plant_code": plant_code if supplier == "LM" else "",
                            "esn": esn,
                            "inspection_stage": stage,
                            "sect": sect_folder,
                            "comment": self.comment_input.text()
                        }

                        metadata_file = os.path.join(root, "metadata.json")
                        with open(metadata_file, "w") as f:
                            json.dump(metadata, f, indent=4)
                        log_area.append(f"✅ Metadata created in: {metadata_file}")
                        metadata_generated = True

                    except Exception as e:
                        log_area.append(f"❌ Failed to extract metadata from folder path {root}: {e}")

                elif is_leaf_folder and 'ros' not in root.lower():
                    log_area.append(f"⚠️ No media files found in: {root}")

        if not metadata_generated:
            log_area.append("❌ No metadata was generated for any folder.")

        # Show the popup window
        log_window.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = FolderCreatorApp()
    ex.show()
    sys.exit(app.exec_())
